# azure-pipelines.yml
trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md

variables:
  # Container Registry Service Connection
  dockerRegistryServiceConnection: 'acr-service-connection'
  imageRepository: 'knowledgecity-app'
  containerRegistry: 'myacr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Service Connection
  kubernetesServiceConnection: 'aks-service-connection'
  namespace: 'knowledgecity-production'
  
  # Agent Pool
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and Push Docker Image
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Docker@2
      displayName: Build and Push Docker Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Deployment Manifests'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/deployment'
        ArtifactName: 'manifests'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: succeeded()
  
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    environment: 'knowledgecity-production'
    pool:
      vmImage: $(vmImageName)
    
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
            displayName: Download Manifests
            
          - task: Kubernetes@1
            displayName: Create Namespace
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'apply'
              arguments: '--dry-run=client -f $(Pipeline.Workspace)/manifests/namespace.yaml'
              
          - task: Kubernetes@1
            displayName: Deploy Application
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: $(kubernetesServiceConnection)
              namespace: $(namespace)
              command: 'apply'
              arguments: '-f $(Pipeline.Workspace)/manifests/'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'